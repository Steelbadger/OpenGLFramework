#version 330 core


in vec2 UV;
in vec3 worldPosition;
in vec3 normal;
in vec3 vertNorm;
in vec3 lightDir;
in vec3 lightCol;

// Ouput data
out vec3 color;

uniform sampler2D texture;

void main()
{
	float shininess = 10;
	vec3 lightcolor = lightCol;
	color = texture2D( texture, UV ).rgb;
	vec3 nv = normalize(vertNorm);

	vec3 ambient = color * lightcolor * 0.1;

	vec3 fragToLight = normalize(-lightDir);
	vec3 norm = normalize(normal);
	vec3 fragToView = normalize(-worldPosition);

	float diffuseContribution = max(0.0, dot(nv, fragToLight));
	vec3 diffuse = color * lightcolor * diffuseContribution;

	vec3 reflection = reflect(fragToLight, nv);
	vec3 thing = normalize(fragToLight - worldPosition);

	float specContribution = max(0.0, dot(reflection, thing));
	specContribution = pow(specContribution, shininess);
	
	vec3 specular = specContribution * lightcolor * color;
	color = ambient + (diffuse + specular);
}