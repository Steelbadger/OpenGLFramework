#version 330 core


in vec2 UV;
in vec3 worldPosition;
in vec3 normal;

// Ouput data
out vec3 color;

uniform sampler2D texture;
uniform vec3 lightpos;

void main()
{
	float shininess = 20;
	vec3 lightcolor = vec3(1.0, 1.0, 1.0);
	color = texture2D( texture, UV ).rgb;

	float distance = max(1.0, distance(vec3(0.0, 0.0, 0.0), worldPosition)/10);

	float attenuation = pow(0.7, distance);
	attenuation = 1.0;
	vec3 ambient = color * lightcolor * 0.05;

	vec3 fragToLight = normalize(-worldPosition);
	vec3 norm = normalize(normal);

	float diffuseContribution = max(0.0, dot(norm, fragToLight));
	vec3 diffuse = color * lightcolor * diffuseContribution * attenuation;

	vec3 reflection = reflect(fragToLight, norm);

	float specContribution = max(0.0, dot(reflection, -fragToLight));
	specContribution = pow(specContribution, shininess)*attenuation;
	
	vec3 specular = specContribution * lightcolor * color;
	//color = ambient + specular;
	color = ambient + (diffuse + specular);

}