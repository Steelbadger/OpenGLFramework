#version 330 core


in vec2 UV;
in vec3 worldPosition;
in vec3 normal;
in vec3 vertNorm;

// Ouput data
out vec3 color;

uniform sampler2D texture;

struct Light {
	vec4 position;
	vec4 colour;
};

uniform Light sun;

void main()
{
	//  hardcoded shininess
	float shininess = 200;
	//  Set our light colour
	//vec3 lightcolor = vec3(1.0, 1.0, 1.0);

	vec3 lightcolour = vec3(sun.colour);

	//  Our texture colour
	vec3 texcolour = texture2D( texture, UV ).rgb;




	vec3 ambient = texcolour * lightcolour * sun.colour.w;
	vec3 direction = vec3(sun.position);

	vec3 fragToLight = normalize(direction);

	vec3 surfaceNormal = normalize(normal);
	
	vec3 fragToView = normalize(-worldPosition);

	float diffuseContribution = max(0.0, dot(surfaceNormal, fragToLight));

	vec3 diffuse = texcolour * lightcolour * diffuseContribution * (1-sun.colour.w);

	vec3 lightReflection = reflect(fragToLight, surfaceNormal);

	float specularContribution = max(0.0, dot(-lightReflection, fragToView));
	specularContribution = pow(specularContribution, shininess);

	vec3 specular = texcolour * lightcolour * specularContribution;

	fragToLight = normalize(-worldPosition);

	diffuseContribution = max(0.0, dot(surfaceNormal, fragToLight));

	float distance = distance(vec3(0.0, 0.0, 0.0), worldPosition);

	diffuse = diffuse + (texcolour * lightcolour * diffuseContribution * (1/(1 + 0.01*distance + 0.0001 * distance * distance)));

	color = ambient + diffuse + specular;
}