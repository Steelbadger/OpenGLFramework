#version 330 core


in vec2 UV;
in vec3 worldPosition;
in vec3 normal;
in vec3 vertNorm;
in vec3 globalPos;

// Ouput data
out vec3 color;

uniform sampler2D texture;
uniform sampler2D rock;
uniform vec3 lightpos;

void main()
{

	vec3 lightcolor = vec3(1.0, 1.0, 1.0);
	vec3 baseline = vec3(vertNorm.x, 0.0, vertNorm.z);
	baseline = normalize(baseline);
	vec3 vn = normalize(vertNorm);;

	float angle = abs(dot(vn, baseline));

	float grassThresh = 0.45;
	float rockThresh = 0.55;
	angle = max(grassThresh, angle);
	angle = min(rockThresh, angle);


	float alt = globalPos.y;
	alt = min(1.6, alt);
	alt = max(1.2, alt);
	alt = alt-1.2;

	float portion = (angle-grassThresh)/(rockThresh-grassThresh);
	color = portion*texture2D(rock, UV/4).rgb + (1-portion)*texture2D(texture, UV).rgb;

	color = (alt/0.4) * color + (1-(alt/0.4)) * (texture2D(rock, UV/4).rgb * vec3(0.543, 0.36, 0.36));

	float distance = max(1.0, distance(vec3(0.0, 0.0, 0.0), worldPosition)/10);

	vec3 ambient = color * lightcolor * 0.05;

	vec3 fragToLight = normalize(-worldPosition);
	vec3 norm = normalize(normal);

	float diffuseContribution = max(0.0, dot(norm, fragToLight));
	vec3 diffuse = color * lightcolor * diffuseContribution;

	vec3 reflection = reflect(fragToLight, norm);

	color = ambient + diffuse;

}